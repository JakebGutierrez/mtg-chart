{"ast":null,"code":"var _jsxFileName = \"/Users/Jakeb/repos/mtg-topster/mtg-topster-frontend/src/CardFetcher.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport axios from 'axios';\nimport SearchBar from './SearchBar';\nimport './CardFetcher.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction CardFetcher() {\n  _s();\n  const [searchResults, setSearchResults] = useState([]);\n  const [gridItems, setGridItems] = useState(Array(9).fill(null));\n  const [allCards, setAllCards] = useState({});\n  const handleSearch = async query => {\n    try {\n      const response = await axios.get(`http://localhost:5000/search/${query}`);\n      setSearchResults(response.data);\n\n      // Store all cards so we can reference them when needed without searching through search results\n      const newAllCards = {\n        ...allCards\n      };\n      response.data.forEach(card => {\n        newAllCards[card.id] = card;\n      });\n      setAllCards(newAllCards);\n    } catch (error) {\n      console.error(\"Error searching for cards:\", error);\n    }\n  };\n  function handleDragStart(event) {\n    event.dataTransfer.setData(\"cardId\", event.target.id);\n  }\n  function handleDragOver(event) {\n    event.preventDefault();\n  }\n  function handleDrop(event, index) {\n    event.preventDefault();\n    const cardId = event.dataTransfer.getData(\"cardId\");\n    const updatedGridItems = [...gridItems];\n    updatedGridItems[index] = cardId;\n    setGridItems(updatedGridItems);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(SearchBar, {\n      onSearch: handleSearch\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"grid-container\",\n      children: gridItems.map((cardId, index) => {\n        const card = allCards[cardId];\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"grid-item\",\n          onDrop: e => handleDrop(e, index),\n          onDragOver: handleDragOver,\n          children: card && card.image_uris && card.image_uris.art_crop && /*#__PURE__*/_jsxDEV(\"img\", {\n            className: \"cropped-image\",\n            src: card.image_uris.art_crop,\n            alt: card.name,\n            draggable: \"true\",\n            onDragStart: handleDragStart,\n            id: cardId\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 53,\n            columnNumber: 33\n          }, this)\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 25\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 13\n    }, this), searchResults.map(card => card.image_uris && card.image_uris.art_crop ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"art-container\",\n      children: /*#__PURE__*/_jsxDEV(\"img\", {\n        className: \"cropped-image\",\n        src: card.image_uris.art_crop,\n        alt: card.name,\n        draggable: \"true\",\n        onDragStart: handleDragStart,\n        id: card.id.toString()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 25\n      }, this)\n    }, card.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 21\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"art-container\",\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"No image available for \", card.name, \".\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 25\n      }, this)\n    }, card.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 21\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 9\n  }, this);\n}\n_s(CardFetcher, \"Y5epUNUBOKY8GTpVWXyXpKGnBbY=\");\n_c = CardFetcher;\nexport default CardFetcher;\nvar _c;\n$RefreshReg$(_c, \"CardFetcher\");","map":{"version":3,"names":["React","useState","axios","SearchBar","jsxDEV","_jsxDEV","CardFetcher","_s","searchResults","setSearchResults","gridItems","setGridItems","Array","fill","allCards","setAllCards","handleSearch","query","response","get","data","newAllCards","forEach","card","id","error","console","handleDragStart","event","dataTransfer","setData","target","handleDragOver","preventDefault","handleDrop","index","cardId","getData","updatedGridItems","children","onSearch","fileName","_jsxFileName","lineNumber","columnNumber","className","map","onDrop","e","onDragOver","image_uris","art_crop","src","alt","name","draggable","onDragStart","toString","_c","$RefreshReg$"],"sources":["/Users/Jakeb/repos/mtg-topster/mtg-topster-frontend/src/CardFetcher.js"],"sourcesContent":["import React, { useState } from 'react';\nimport axios from 'axios';\nimport SearchBar from './SearchBar';\nimport './CardFetcher.css';\n\nfunction CardFetcher() {\n    const [searchResults, setSearchResults] = useState([]);\n    const [gridItems, setGridItems] = useState(Array(9).fill(null));\n    const [allCards, setAllCards] = useState({});\n\n    const handleSearch = async (query) => {\n        try {\n            const response = await axios.get(`http://localhost:5000/search/${query}`);\n            setSearchResults(response.data);\n\n            // Store all cards so we can reference them when needed without searching through search results\n            const newAllCards = { ...allCards };\n            response.data.forEach(card => {\n                newAllCards[card.id] = card;\n            });\n            setAllCards(newAllCards);\n        } catch (error) {\n            console.error(\"Error searching for cards:\", error);\n        }\n    };\n\n    function handleDragStart(event) {\n        event.dataTransfer.setData(\"cardId\", event.target.id);\n    }\n\n    function handleDragOver(event) {\n        event.preventDefault();\n    }\n\n    function handleDrop(event, index) {\n        event.preventDefault();\n        const cardId = event.dataTransfer.getData(\"cardId\");\n\n        const updatedGridItems = [...gridItems];\n        updatedGridItems[index] = cardId;\n        setGridItems(updatedGridItems);\n    }\n\n    return (\n        <div>\n            <SearchBar onSearch={handleSearch} />\n            <div className=\"grid-container\">\n                {gridItems.map((cardId, index) => {\n                    const card = allCards[cardId];\n                    return (\n                        <div key={index} className=\"grid-item\" onDrop={(e) => handleDrop(e, index)} onDragOver={handleDragOver}>\n                            {card && card.image_uris && card.image_uris.art_crop && (\n                                <img \n                                    className=\"cropped-image\" \n                                    src={card.image_uris.art_crop} \n                                    alt={card.name}\n                                    draggable=\"true\" \n                                    onDragStart={handleDragStart} \n                                    id={cardId} \n                                />\n                            )}\n                        </div>\n                    );\n                })}\n            </div>\n            {searchResults.map(card => (\n                card.image_uris && card.image_uris.art_crop ? (\n                    <div className=\"art-container\" key={card.id}>\n                        <img className=\"cropped-image\" src={card.image_uris.art_crop} alt={card.name} draggable=\"true\" onDragStart={handleDragStart} id={card.id.toString()} />\n                    </div>\n                ) : (\n                    <div className=\"art-container\" key={card.id}>\n                        <p>No image available for {card.name}.</p>\n                    </div>\n                )\n            ))}\n        </div>\n    );\n}\n\nexport default CardFetcher;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAOC,SAAS,MAAM,aAAa;AACnC,OAAO,mBAAmB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE3B,SAASC,WAAWA,CAAA,EAAG;EAAAC,EAAA;EACnB,MAAM,CAACC,aAAa,EAAEC,gBAAgB,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EACtD,MAAM,CAACS,SAAS,EAAEC,YAAY,CAAC,GAAGV,QAAQ,CAACW,KAAK,CAAC,CAAC,CAAC,CAACC,IAAI,CAAC,IAAI,CAAC,CAAC;EAC/D,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGd,QAAQ,CAAC,CAAC,CAAC,CAAC;EAE5C,MAAMe,YAAY,GAAG,MAAOC,KAAK,IAAK;IAClC,IAAI;MACA,MAAMC,QAAQ,GAAG,MAAMhB,KAAK,CAACiB,GAAG,CAAE,gCAA+BF,KAAM,EAAC,CAAC;MACzER,gBAAgB,CAACS,QAAQ,CAACE,IAAI,CAAC;;MAE/B;MACA,MAAMC,WAAW,GAAG;QAAE,GAAGP;MAAS,CAAC;MACnCI,QAAQ,CAACE,IAAI,CAACE,OAAO,CAACC,IAAI,IAAI;QAC1BF,WAAW,CAACE,IAAI,CAACC,EAAE,CAAC,GAAGD,IAAI;MAC/B,CAAC,CAAC;MACFR,WAAW,CAACM,WAAW,CAAC;IAC5B,CAAC,CAAC,OAAOI,KAAK,EAAE;MACZC,OAAO,CAACD,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;IACtD;EACJ,CAAC;EAED,SAASE,eAAeA,CAACC,KAAK,EAAE;IAC5BA,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,QAAQ,EAAEF,KAAK,CAACG,MAAM,CAACP,EAAE,CAAC;EACzD;EAEA,SAASQ,cAAcA,CAACJ,KAAK,EAAE;IAC3BA,KAAK,CAACK,cAAc,CAAC,CAAC;EAC1B;EAEA,SAASC,UAAUA,CAACN,KAAK,EAAEO,KAAK,EAAE;IAC9BP,KAAK,CAACK,cAAc,CAAC,CAAC;IACtB,MAAMG,MAAM,GAAGR,KAAK,CAACC,YAAY,CAACQ,OAAO,CAAC,QAAQ,CAAC;IAEnD,MAAMC,gBAAgB,GAAG,CAAC,GAAG5B,SAAS,CAAC;IACvC4B,gBAAgB,CAACH,KAAK,CAAC,GAAGC,MAAM;IAChCzB,YAAY,CAAC2B,gBAAgB,CAAC;EAClC;EAEA,oBACIjC,OAAA;IAAAkC,QAAA,gBACIlC,OAAA,CAACF,SAAS;MAACqC,QAAQ,EAAExB;IAAa;MAAAyB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eACrCvC,OAAA;MAAKwC,SAAS,EAAC,gBAAgB;MAAAN,QAAA,EAC1B7B,SAAS,CAACoC,GAAG,CAAC,CAACV,MAAM,EAAED,KAAK,KAAK;QAC9B,MAAMZ,IAAI,GAAGT,QAAQ,CAACsB,MAAM,CAAC;QAC7B,oBACI/B,OAAA;UAAiBwC,SAAS,EAAC,WAAW;UAACE,MAAM,EAAGC,CAAC,IAAKd,UAAU,CAACc,CAAC,EAAEb,KAAK,CAAE;UAACc,UAAU,EAAEjB,cAAe;UAAAO,QAAA,EAClGhB,IAAI,IAAIA,IAAI,CAAC2B,UAAU,IAAI3B,IAAI,CAAC2B,UAAU,CAACC,QAAQ,iBAChD9C,OAAA;YACIwC,SAAS,EAAC,eAAe;YACzBO,GAAG,EAAE7B,IAAI,CAAC2B,UAAU,CAACC,QAAS;YAC9BE,GAAG,EAAE9B,IAAI,CAAC+B,IAAK;YACfC,SAAS,EAAC,MAAM;YAChBC,WAAW,EAAE7B,eAAgB;YAC7BH,EAAE,EAAEY;UAAO;YAAAK,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACd;QACJ,GAVKT,KAAK;UAAAM,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAWV,CAAC;MAEd,CAAC;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACD,CAAC,EACLpC,aAAa,CAACsC,GAAG,CAACvB,IAAI,IACnBA,IAAI,CAAC2B,UAAU,IAAI3B,IAAI,CAAC2B,UAAU,CAACC,QAAQ,gBACvC9C,OAAA;MAAKwC,SAAS,EAAC,eAAe;MAAAN,QAAA,eAC1BlC,OAAA;QAAKwC,SAAS,EAAC,eAAe;QAACO,GAAG,EAAE7B,IAAI,CAAC2B,UAAU,CAACC,QAAS;QAACE,GAAG,EAAE9B,IAAI,CAAC+B,IAAK;QAACC,SAAS,EAAC,MAAM;QAACC,WAAW,EAAE7B,eAAgB;QAACH,EAAE,EAAED,IAAI,CAACC,EAAE,CAACiC,QAAQ,CAAC;MAAE;QAAAhB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE;IAAC,GADvHrB,IAAI,CAACC,EAAE;MAAAiB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAEtC,CAAC,gBAENvC,OAAA;MAAKwC,SAAS,EAAC,eAAe;MAAAN,QAAA,eAC1BlC,OAAA;QAAAkC,QAAA,GAAG,yBAAuB,EAAChB,IAAI,CAAC+B,IAAI,EAAC,GAAC;MAAA;QAAAb,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG;IAAC,GADVrB,IAAI,CAACC,EAAE;MAAAiB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAEtC,CAEZ,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACD,CAAC;AAEd;AAACrC,EAAA,CAzEQD,WAAW;AAAAoD,EAAA,GAAXpD,WAAW;AA2EpB,eAAeA,WAAW;AAAC,IAAAoD,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}