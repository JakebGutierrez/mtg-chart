{"ast":null,"code":"var _jsxFileName = \"/Users/Jakeb/repos/mtg-topster/mtg-topster-frontend/src/CardFetcher.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport axios from 'axios';\nimport SearchBar from './SearchBar';\nimport './CardFetcher.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction CardFetcher() {\n  _s();\n  const [searchResults, setSearchResults] = useState([]);\n  const [gridItems, setGridItems] = useState(Array(9).fill(null));\n  const handleSearch = async query => {\n    setSearchResults([]); // Clear old results on a new search\n    try {\n      const response = await axios.get(`http://localhost:5000/search/${query}`);\n      setSearchResults(response.data);\n    } catch (error) {\n      console.error(\"Error searching for cards:\", error);\n    }\n  };\n  function handleDragStart(event) {\n    event.dataTransfer.setData(\"cardId\", event.target.id);\n  }\n  function handleDragOver(event) {\n    event.preventDefault();\n  }\n  function handleDrop(event, index) {\n    event.preventDefault();\n    const cardId = event.dataTransfer.getData(\"cardId\");\n    const updatedGridItems = [...gridItems];\n    const existingIndex = updatedGridItems.indexOf(cardId);\n    if (existingIndex !== -1) {\n      updatedGridItems[existingIndex] = null; // Clear the old cell if the item was already in the grid\n    }\n\n    updatedGridItems[index] = cardId;\n    setGridItems(updatedGridItems);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(SearchBar, {\n      onSearch: handleSearch\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"grid-container\",\n      children: gridItems.map((cardId, index) => {\n        const card = searchResults.find(card => card.id.toString() === cardId);\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"grid-item\",\n          onDrop: e => handleDrop(e, index),\n          onDragOver: handleDragOver,\n          children: card && card.image_uris && card.image_uris.art_crop && /*#__PURE__*/_jsxDEV(\"img\", {\n            className: \"cropped-image\",\n            src: card.image_uris.art_crop,\n            alt: card.name,\n            draggable: \"true\",\n            onDragStart: handleDragStart,\n            id: cardId\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 50,\n            columnNumber: 33\n          }, this)\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 25\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 13\n    }, this), searchResults.map(card => card.image_uris && card.image_uris.art_crop ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"art-container\",\n      children: /*#__PURE__*/_jsxDEV(\"img\", {\n        className: \"cropped-image\",\n        src: card.image_uris.art_crop,\n        alt: card.name,\n        draggable: \"true\",\n        onDragStart: handleDragStart,\n        id: card.id.toString()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 25\n      }, this)\n    }, card.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 21\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"art-container\",\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"No image available for \", card.name, \".\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 25\n      }, this)\n    }, card.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 21\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 9\n  }, this);\n}\n_s(CardFetcher, \"9d5IpUolvlaYfrmGRsIHbCyp3F0=\");\n_c = CardFetcher;\nexport default CardFetcher;\nvar _c;\n$RefreshReg$(_c, \"CardFetcher\");","map":{"version":3,"names":["React","useState","axios","SearchBar","jsxDEV","_jsxDEV","CardFetcher","_s","searchResults","setSearchResults","gridItems","setGridItems","Array","fill","handleSearch","query","response","get","data","error","console","handleDragStart","event","dataTransfer","setData","target","id","handleDragOver","preventDefault","handleDrop","index","cardId","getData","updatedGridItems","existingIndex","indexOf","children","onSearch","fileName","_jsxFileName","lineNumber","columnNumber","className","map","card","find","toString","onDrop","e","onDragOver","image_uris","art_crop","src","alt","name","draggable","onDragStart","_c","$RefreshReg$"],"sources":["/Users/Jakeb/repos/mtg-topster/mtg-topster-frontend/src/CardFetcher.js"],"sourcesContent":["import React, { useState } from 'react';\nimport axios from 'axios';\nimport SearchBar from './SearchBar';\nimport './CardFetcher.css';\n\nfunction CardFetcher() {\n    const [searchResults, setSearchResults] = useState([]);\n    const [gridItems, setGridItems] = useState(Array(9).fill(null));\n\n    const handleSearch = async (query) => {\n        setSearchResults([]); // Clear old results on a new search\n        try {\n            const response = await axios.get(`http://localhost:5000/search/${query}`);\n            setSearchResults(response.data);\n        } catch (error) {\n            console.error(\"Error searching for cards:\", error);\n        }\n    };\n\n    function handleDragStart(event) {\n        event.dataTransfer.setData(\"cardId\", event.target.id);\n    }\n\n    function handleDragOver(event) {\n        event.preventDefault();\n    }\n\n    function handleDrop(event, index) {\n        event.preventDefault();\n        const cardId = event.dataTransfer.getData(\"cardId\");\n\n        const updatedGridItems = [...gridItems];\n        const existingIndex = updatedGridItems.indexOf(cardId);\n        if (existingIndex !== -1) {\n            updatedGridItems[existingIndex] = null; // Clear the old cell if the item was already in the grid\n        }\n        updatedGridItems[index] = cardId;\n        setGridItems(updatedGridItems);\n    }\n\n    return (\n        <div>\n            <SearchBar onSearch={handleSearch} />\n            <div className=\"grid-container\">\n                {gridItems.map((cardId, index) => {\n                    const card = searchResults.find(card => card.id.toString() === cardId);\n                    return (\n                        <div key={index} className=\"grid-item\" onDrop={(e) => handleDrop(e, index)} onDragOver={handleDragOver}>\n                            {card && card.image_uris && card.image_uris.art_crop && (\n                                <img \n                                    className=\"cropped-image\" \n                                    src={card.image_uris.art_crop} \n                                    alt={card.name}\n                                    draggable=\"true\" \n                                    onDragStart={handleDragStart} \n                                    id={cardId} \n                                />\n                            )}\n                        </div>\n                    );\n                })}\n            </div>\n            {searchResults.map(card => (\n                card.image_uris && card.image_uris.art_crop ? (\n                    <div className=\"art-container\" key={card.id}>\n                        <img className=\"cropped-image\" src={card.image_uris.art_crop} alt={card.name} draggable=\"true\" onDragStart={handleDragStart} id={card.id.toString()} />\n                    </div>\n                ) : (\n                    <div className=\"art-container\" key={card.id}>\n                        <p>No image available for {card.name}.</p>\n                    </div>\n                )\n            ))}\n        </div>\n    );\n}\n\nexport default CardFetcher;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}