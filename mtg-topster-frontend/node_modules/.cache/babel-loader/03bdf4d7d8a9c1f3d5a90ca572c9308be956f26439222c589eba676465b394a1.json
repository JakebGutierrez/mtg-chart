{"ast":null,"code":"var _jsxFileName = \"/Users/Jakeb/repos/mtg-topster/mtg-topster-frontend/src/CardFetcher.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport axios from 'axios';\nimport Sidebar from './Sidebar';\nimport './CardFetcher.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction CardFetcher() {\n  _s();\n  const [showNames, setShowNames] = useState(true); // default to show names\n\n  const [layout] = useState([]);\n  const [gridSize, setGridSize] = useState(5); // For a 3x3 grid\n\n  const [searchResults, setSearchResults] = useState([]);\n  const [gridItems, setGridItems] = useState(Array(gridSize * gridSize).fill(null));\n  const handleSearch = async query => {\n    try {\n      const response = await axios.get(`http://localhost:5000/search/${query}`);\n      const limitedResults = response.data.slice(0, 20); // Limit the results to the top 20\n      setSearchResults(limitedResults);\n    } catch (error) {\n      console.error(\"Error searching for cards:\", error);\n    }\n  };\n  function handleDragStart(event) {\n    event.dataTransfer.setData(\"cardId\", event.target.id);\n    event.dataTransfer.setData(\"source\", event.target.getAttribute(\"data-source\"));\n  }\n  function handleDragOver(event) {\n    event.preventDefault();\n  }\n  function handleDrop(event, index) {\n    event.preventDefault();\n    const cardId = event.dataTransfer.getData(\"cardId\");\n    const source = event.dataTransfer.getData(\"source\");\n    const updatedGridItems = [...gridItems];\n    let draggedCard = null;\n    if (source === \"searchResult\") {\n      draggedCard = searchResults.find(card => card.id.toString() === cardId);\n      setSearchResults(prev => prev.filter(card => card.id.toString() !== cardId));\n    } else if (source === \"gridItem\") {\n      const sourceIndex = gridItems.findIndex(item => item && item.id.toString() === cardId);\n      draggedCard = updatedGridItems[sourceIndex];\n      updatedGridItems[sourceIndex] = updatedGridItems[index];\n    }\n    updatedGridItems[index] = draggedCard;\n    setGridItems(updatedGridItems);\n  }\n  function saveCollage(gridItems) {\n    // Convert the state to a string and save it in local storage\n    localStorage.setItem('savedCollage', JSON.stringify(gridItems));\n  }\n  function loadCollage() {\n    // Fetch the saved state from local storage and convert it back to an object\n    const savedCollage = JSON.parse(localStorage.getItem('savedCollage'));\n    return savedCollage || []; // Return an empty array if no collage is saved\n  }\n\n  function handleSave() {\n    saveCollage(gridItems);\n    alert(\"Collage saved!\");\n  }\n  function handleLoad() {\n    const loadedCollage = loadCollage();\n    setGridItems(loadedCollage);\n  }\n  function handleGridSizeChange(event) {\n    const newSize = parseInt(event.target.value);\n    setGridSize(newSize);\n    setGridItems(Array(newSize * newSize).fill(null));\n  }\n  function resetGrid() {\n    setGridItems(Array(gridSize * gridSize).fill(null));\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleSave,\n      children: \"Save Chart\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleLoad,\n      children: \"Load Chart\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: resetGrid,\n      children: \"Reset\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"main-container\",\n      children: [/*#__PURE__*/_jsxDEV(Sidebar, {\n        onSearch: handleSearch,\n        searchResults: searchResults,\n        showNames: showNames,\n        setShowNames: setShowNames,\n        gridSize: gridSize,\n        handleGridSizeChange: handleGridSizeChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 1\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `grid-container ${layout}`,\n        style: {\n          gridTemplateColumns: `repeat(${gridSize}, 1fr)`\n        },\n        children: Array.from({\n          length: gridSize * gridSize\n        }).map((_, index) => {\n          const currentCard = gridItems[index];\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"grid-item\",\n            onDrop: e => handleDrop(e, index),\n            onDragOver: handleDragOver,\n            children: currentCard && currentCard.image_uris && currentCard.image_uris.art_crop && /*#__PURE__*/_jsxDEV(\"img\", {\n              className: \"cropped-image\",\n              src: currentCard.image_uris.art_crop,\n              alt: currentCard.name,\n              draggable: \"true\",\n              onDragStart: handleDragStart,\n              id: currentCard.id.toString(),\n              \"data-source\": \"gridItem\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 115,\n              columnNumber: 25\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 113,\n            columnNumber: 17\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"card-names-column\",\n        children: Array.from({\n          length: gridSize * gridSize\n        }).map((_, index) => {\n          const currentCard = gridItems[index];\n          return /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"card-name\",\n            style: {\n              visibility: showNames ? 'visible' : 'hidden'\n            },\n            children: currentCard && currentCard.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 133,\n            columnNumber: 17\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 1\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 93,\n    columnNumber: 9\n  }, this);\n}\n_s(CardFetcher, \"9e4W82hIf9G4BL0s8y3xCaSz5VE=\");\n_c = CardFetcher;\nexport default CardFetcher;\nvar _c;\n$RefreshReg$(_c, \"CardFetcher\");","map":{"version":3,"names":["React","useState","axios","Sidebar","jsxDEV","_jsxDEV","CardFetcher","_s","showNames","setShowNames","layout","gridSize","setGridSize","searchResults","setSearchResults","gridItems","setGridItems","Array","fill","handleSearch","query","response","get","limitedResults","data","slice","error","console","handleDragStart","event","dataTransfer","setData","target","id","getAttribute","handleDragOver","preventDefault","handleDrop","index","cardId","getData","source","updatedGridItems","draggedCard","find","card","toString","prev","filter","sourceIndex","findIndex","item","saveCollage","localStorage","setItem","JSON","stringify","loadCollage","savedCollage","parse","getItem","handleSave","alert","handleLoad","loadedCollage","handleGridSizeChange","newSize","parseInt","value","resetGrid","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","className","onSearch","style","gridTemplateColumns","from","length","map","_","currentCard","onDrop","e","onDragOver","image_uris","art_crop","src","alt","name","draggable","onDragStart","visibility","_c","$RefreshReg$"],"sources":["/Users/Jakeb/repos/mtg-topster/mtg-topster-frontend/src/CardFetcher.js"],"sourcesContent":["import React, { useState } from 'react';\nimport axios from 'axios';\nimport Sidebar from './Sidebar';\nimport './CardFetcher.css';\n\nfunction CardFetcher() {\n    const [showNames, setShowNames] = useState(true); // default to show names\n\n    const [layout] = useState([]);\n\n\n    const [gridSize, setGridSize] = useState(5);  // For a 3x3 grid\n    \n    const [searchResults, setSearchResults] = useState([]);\n    const [gridItems, setGridItems] = useState(Array(gridSize * gridSize).fill(null));\n    \n\n\n    const handleSearch = async (query) => {\n        try {\n            const response = await axios.get(`http://localhost:5000/search/${query}`);\n            const limitedResults = response.data.slice(0, 20);  // Limit the results to the top 20\n            setSearchResults(limitedResults);\n        } catch (error) {\n            console.error(\"Error searching for cards:\", error);\n        }\n    };\n\n    function handleDragStart(event) {\n        event.dataTransfer.setData(\"cardId\", event.target.id);\n        event.dataTransfer.setData(\"source\", event.target.getAttribute(\"data-source\"));\n    }\n\n    function handleDragOver(event) {\n        event.preventDefault();\n    }\n\n    function handleDrop(event, index) {\n        event.preventDefault();\n    \n        const cardId = event.dataTransfer.getData(\"cardId\");\n        const source = event.dataTransfer.getData(\"source\");\n    \n        const updatedGridItems = [...gridItems];\n    \n        let draggedCard = null;\n        if (source === \"searchResult\") {\n            draggedCard = searchResults.find(card => card.id.toString() === cardId);\n            setSearchResults(prev => prev.filter(card => card.id.toString() !== cardId));\n        } else if (source === \"gridItem\") {\n            const sourceIndex = gridItems.findIndex(item => item && item.id.toString() === cardId);\n            draggedCard = updatedGridItems[sourceIndex];\n            updatedGridItems[sourceIndex] = updatedGridItems[index];\n        }\n    \n        updatedGridItems[index] = draggedCard;\n        setGridItems(updatedGridItems);\n    }\n\n    function saveCollage(gridItems) {\n        // Convert the state to a string and save it in local storage\n        localStorage.setItem('savedCollage', JSON.stringify(gridItems));\n    }\n    \n    function loadCollage() {\n        // Fetch the saved state from local storage and convert it back to an object\n        const savedCollage = JSON.parse(localStorage.getItem('savedCollage'));\n        return savedCollage || []; // Return an empty array if no collage is saved\n    }\n    \n    function handleSave() {\n        saveCollage(gridItems);\n        alert(\"Collage saved!\");\n    }\n\n    function handleLoad() {\n        const loadedCollage = loadCollage();\n        setGridItems(loadedCollage);\n    }\n\n    function handleGridSizeChange(event) {\n        const newSize = parseInt(event.target.value);\n        setGridSize(newSize);\n        setGridItems(Array(newSize * newSize).fill(null));\n    }\n\n    function resetGrid() {\n        setGridItems(Array(gridSize * gridSize).fill(null));\n    }\n    \n\n    return (\n        <div>\n            <button onClick={handleSave}>Save Chart</button>\n            <button onClick={handleLoad}>Load Chart</button>\n            <button onClick={resetGrid}>Reset</button>\n\n\n\n<div className=\"main-container\">\n<Sidebar \n                onSearch={handleSearch}\n                searchResults={searchResults}\n                showNames={showNames}\n                setShowNames={setShowNames}\n                gridSize={gridSize}\n                handleGridSizeChange={handleGridSizeChange}\n            />\n    <div className={`grid-container ${layout}`} style={{ gridTemplateColumns: `repeat(${gridSize}, 1fr)` }}>\n        {Array.from({ length: gridSize * gridSize }).map((_, index) => {\n            const currentCard = gridItems[index];\n            return (\n                <div className=\"grid-item\" onDrop={(e) => handleDrop(e, index)} onDragOver={handleDragOver}>\n                    {currentCard && currentCard.image_uris && currentCard.image_uris.art_crop && (\n                        <img \n                            className=\"cropped-image\" \n                            src={currentCard.image_uris.art_crop} \n                            alt={currentCard.name}\n                            draggable=\"true\" \n                            onDragStart={handleDragStart} \n                            id={currentCard.id.toString()}\n                            data-source=\"gridItem\"\n                        />\n                    )}\n                </div>\n            );\n        })}\n    </div>\n    <div className=\"card-names-column\">\n        {Array.from({ length: gridSize * gridSize }).map((_, index) => {\n            const currentCard = gridItems[index];\n            return (\n                <p className=\"card-name\" style={{visibility: showNames ? 'visible' : 'hidden'}}>\n                    {currentCard && currentCard.name}\n                </p>\n            );\n        })}\n    </div>\n</div>\n        </div>\n    );\n}\n\nexport default CardFetcher;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}